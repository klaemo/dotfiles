#!/bin/bash

# Credit for this file goes to @necolas.

DOTFILES_DIRECTORY="${HOME}/.dotfiles"
DOTFILES_TARBALL_PATH="https://github.com/klaemo/dotfiles/tarball/master"
DOTFILES_GIT_REMOTE="https://github.com/klaemo/dotfiles.git"

# If missing, download and extract the dotfiles repository
if [[ ! -d ${DOTFILES_DIRECTORY} ]]; then
    printf "$(tput setaf 7)Downloading dotfiles...\033[m\n"
    mkdir ${DOTFILES_DIRECTORY}
    # Get the tarball
    curl -fsSLo ${HOME}/dotfiles.tar.gz ${DOTFILES_TARBALL_PATH}
    # Extract to the dotfiles directory
    tar -zxf ${HOME}/dotfiles.tar.gz --strip-components 1 -C ${DOTFILES_DIRECTORY}
    # Remove the tarball
    rm -rf ${HOME}/dotfiles.tar.gz
fi

cd ${DOTFILES_DIRECTORY}

source ./lib/help
source ./lib/utils
source ./lib/brew
source ./lib/node

# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    run_help
    exit
fi

# Test for known flags
for opt in $@
do
    case $opt in
        --no-packages) no_packages=true ;;
        --no-sync) no_sync=true ;;
        -*|--*) e_warning "Warning: invalid option $opt" ;;
    esac
done

# # Before relying on Homebrew, check that packages can be compiled
# if ! type_exists 'gcc'; then
#     e_error "The XCode Command Line Tools must be installed first."
#     printf "  Download them from: https://developer.apple.com/downloads\n"
#     printf "  Then run: bash ~/.dotfiles/bin/dotfiles\n"
#     exit 1
# fi

# Check for Homebrew
if ! type_exists 'brew'; then
    e_header "Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    # make brew immediately available
    eval $(/opt/homebrew/bin/brew shellenv)
fi

# Check for git
if ! type_exists 'git'; then
    e_header "Updating Homebrew..."
    brew update
    e_header "Installing Git..."
    brew install git
fi

# Initialize the git repository if it's missing
if ! is_git_repo; then
    e_header "Initializing git repository..."
    git init
    git remote add origin ${DOTFILES_GIT_REMOTE}
    git fetch origin master
    # Reset the index and working tree to the fetched HEAD
    # (submodules are cloned in the subsequent sync step)
    git reset --hard FETCH_HEAD
    # Remove any untracked files
    git clean -fd
fi

# Conditionally sync with the remote repository
if [[ $no_sync ]]; then
    printf "Skipped dotfiles sync.\n"
else
    e_header "Syncing dotfiles..."
    # Pull down the latest changes
    git pull --rebase origin master
fi

# Install and update packages
if [[ $no_packages ]]; then
    printf "Skipped package installations.\n"
else
    printf "Updating packages...\n"
    # Install Homebrew formulae
    run_brew
fi

link() {
    # Force create/replace the symlink.
    ln -fs "${DOTFILES_DIRECTORY}/${1}" "${HOME}/${2}"
}

mirrorfiles() {
    # Copy `.gitconfig`.
    # Any global git commands in `~/.bash_profile.local` will be written to
    # `.gitconfig`. This prevents them being committed to the repository.
    rsync -avz --quiet ${DOTFILES_DIRECTORY}/.gitconfig  ${HOME}/.gitconfig

    rsync -avz --quiet ${DOTFILES_DIRECTORY}/settings/alacritty ${HOME}/.config/
    rsync -avz --quiet ${DOTFILES_DIRECTORY}/settings/zellij ${HOME}/.config/
    rsync -avz --quiet ${DOTFILES_DIRECTORY}/settings/ghostty ${HOME}/.config/
    rsync -avz --quiet ${DOTFILES_DIRECTORY}/settings/bat ${HOME}/.config/

    # Create the necessary symbolic links between the `.dotfiles` and `HOME`
    # directory.
    link ".wgetrc"          ".wgetrc"
    link ".inputrc"         ".inputrc"
    link ".gitattributes"   ".gitattributes"
    link ".gitignore"       ".gitignore"
    link ".hushlogin"       ".hushlogin"
    link ".zshrc"           ".zshrc"
    link ".aliases"         ".aliases"

    rm -f "$HOME/.zshenv" "$HOME/.zprofile"

    e_success "Dotfiles update complete!"
}

# Ask before potentially overwriting files
seek_confirmation "Warning: This step may overwrite your existing dotfiles."

if is_confirmed; then
    if [[ ! -d ${HOME}/.zsh ]]; then
        mkdir -p "$HOME/.zsh"
    fi
    mirrorfiles
    zsh -c "source ~/.zshrc"
else
    printf "Skipped dotfiles setup.\n"
fi

# Install and update node packages
if [[ $no_packages ]]; then
    printf "Skipped node installation.\n"
else
    printf "Setting up node...\n"

    # Install Node packages
    run_node

    e_success "Node setup complete!"
fi
